-- ЗАДАНИЕ 0
-- Используйте командную строку. Необходимо открыть 2 параллельные сессии в командной строке.
-- Необходимо подтверждение того, что ваша параллельная сессия не сможет увидеть внесенные вами изменения, пока вы не сделаете COMMIT;
-- Сессия 1
-- открыть транзакцию
-- повысить рейтинг “Pizza Hut” до 5 баллов в режиме транзакции.
-- убедитесь, что вы видите изменения в сеансе #1
--
-- Сессия 2
-- убедитесь, что вы не видите изменений в сеансе №2
--
-- Сессия 1
-- сделайте COMMIT
--
-- Сессия 2
-- убедитесь, что вы можете видеть изменения в сеансе №2

--Сессия 1
BEGIN; -- старт транзакции

UPDATE pizzeria SET rating = 5 WHERE pizzeria.name = 'Pizza Hut'; --изменения в нутри транзакции

select * from pizzeria where name  = 'Pizza Hut'; --промежуточный вывод до окончания транзакции


--фактическое обновление таблиц, завершение тразакции

--Сессия 2
select * from pizzeria where name  = 'Pizza Hut'; -- вывод до начала транзакции с другой сессии

select * from pizzeria where name  = 'Pizza Hut'; -- вывод в процессе другой сессии до завершения транзакции

select * from pizzeria where name  = 'Pizza Hut'; -- вывод после завершения транзакции в другой сессии


-- ЗАДАНИЕ 1
-- Используйте командную строку. Необходимо открыть 2 параллельные сессии в командной строке.
-- Убедитесь, что установлен уровень изоляции по умолчанию:
-- SHOW TRANSACTION ISOLATION LEVEL;
-- и результатом должно быть “read committed”, если нет, то, установите уровень изоляции “read committed” явно на уровне сеанса.
-- Проверим один из известных шаблонов базы данных “Lost Update Anomaly”.

-- Проверьте рейтинг “Pizza Hut” в режиме транзакции для обеих сессий, а затем сделайте UPDATE рейтинг до значения 4
-- в сессии 1 и сделайте UPDATE рейтинг до значения 3,6 в сессии 2.

SHOW TRANSACTION ISOLATION LEVEL; -- проверяем уровень изоляции

BEGIN; -- открываем тразнзакцию в сессии 1
BEGIN; -- открываем тразнзакцию в сессии 2

-- проверяем рейтинг в сессии 1
SELECT *
FROM pizzeria
WHERE name = 'Pizza Hut';

-- проверяем рейтинг в сессии 2
SELECT *
FROM pizzeria
WHERE name = 'Pizza Hut';

-- обновляем рейтинг в сессии 1 до значения 4
UPDATE pizzeria
SET rating = 4
WHERE pizzeria.name = 'Pizza Hut';

-- обновляем рейтинг в сессии 2 до значения 3.6
UPDATE pizzeria
SET rating = 3.6
WHERE pizzeria.name = 'Pizza Hut';

-- завершаем транзакцию в сессии 1
COMMIT;

-- завершаем транзакцию в сессии 2
COMMIT;

-- запускаем скрипт для обеих сессий, убеждаемся что вывод одинаковый
-- и будет соотвествовать апдейту из сессии 2.
SELECT *
FROM pizzeria
WHERE name = 'Pizza Hut';


-- ЗАДАНИЕ 2
-- Используйте командную строку. Необходимо открыть 2 параллельные сессии в командной строке.
-- Проверим один из известных шаблонов базы данных “Lost Update Anomaly”, но с уровнем изоляции REPEATABLE READ.
-- Проверьте рейтинг “Pizza Hut” в режиме транзакции для обеих сессий, а затем сделайте UPDATE рейтинг до значения 4 в сессии 1 и
-- UPDATE рейтинг до значения 3,6 в сессии 2.

-- проверяем уровень изоляции в обеих сессиях
SHOW TRANSACTION ISOLATION LEVEL;

-- меняем уровень изоляции в обеих сессиях
SET SESSION CHARACTERISTICS AS TRANSACTION ISOLATION LEVEL REPEATABLE READ;

-- проверяем что мы получили изоляцию уровня REPEATABLE READ
SHOW TRANSACTION ISOLATION LEVEL;

-- открываем тразнзакцию в сессии 1
BEGIN;

-- открываем тразнзакцию в сессии 2
BEGIN;

-- проверяем рейтинг в сессии 1
SELECT *
FROM pizzeria
WHERE name = 'Pizza Hut';

-- проверяем рейтинг в сессии 2
SELECT *
FROM pizzeria
WHERE name = 'Pizza Hut';

-- обновляем рейтинг в сессии 1 до значения 4
UPDATE pizzeria
SET rating = 4
WHERE pizzeria.name = 'Pizza Hut';

-- обновляем рейтинг в сессии 2 до значения 3.6
UPDATE pizzeria
SET rating = 3.6
WHERE pizzeria.name = 'Pizza Hut';

-- завершаем транзакцию в сессии 1, транзакция сессии 2 автоматически завершится с ошибкой
-- ERROR:  could not serialize access due to concurrent update
COMMIT;

-- завершаем транзакцию в сессии 2, из-за ошибки вызванной параллельным чтением транзакция откатывается
COMMIT;

-- запускаем скрипт для обеих сессий, убеждаемся что вывод одинаковый
-- и будет соотвествовать апдейту из сессии 1.
SELECT *
FROM pizzeria
WHERE name = 'Pizza Hut';



-- ЗАДАНИЕ 3
-- Используйте командную строку. Необходимо открыть 2 параллельные сессии в командной строке.
-- Проверим один из известных шаблонов базы данных “Non-Repeatable Reads”, но с уровнем изоляции READ COMMITTED.
-- Проверьте рейтинг “Pizza Hut” в режиме транзакции для обеих сессий, а затем сделайте UPDATE рейтинга
-- до значения 3,6 в сессии 2.

-- проверяем уровень изоляции в обеих сессиях
SHOW TRANSACTION ISOLATION LEVEL;

-- меняем уровень изоляции в обеих сессиях
SET SESSION CHARACTERISTICS AS TRANSACTION ISOLATION LEVEL READ COMMITTED;

-- проверяем что мы получили изоляцию уровня READ COMMITTED в обеих сессиях
SHOW TRANSACTION ISOLATION LEVEL;

-- открываем тразнзакцию в сессии 1
BEGIN;

-- открываем тразнзакцию в сессии 2
BEGIN;

-- проверяем рейтинг в сессии 1
SELECT *
FROM pizzeria
WHERE name = 'Pizza Hut';

-- обновляем рейтинг в сессии 2 до значения 3.6
UPDATE pizzeria
SET rating = 3.6
WHERE pizzeria.name = 'Pizza Hut';

-- завершаем транзакцию в сессии 2
COMMIT;

-- проверяем рейтинг в сессии 1, видим что изменения из сессии два нам уже доступны
SELECT *
FROM pizzeria
WHERE name = 'Pizza Hut';

-- завершаем транзакцию в сессии 1
COMMIT;

-- запускаем скрипт для обеих сессий, убеждаемся что вывод одинаковый
-- и будет соотвествовать апдейту из сессии 2.
SELECT *
FROM pizzeria
WHERE name = 'Pizza Hut';



-- ЗАДАНИЕ 4
-- Используйте командную строку. Необходимо открыть 2 параллельные сессии в командной строке.
-- Проверим один из известных шаблонов базы данных “Non-Repeatable Reads”, но с уровнем изоляции SERIALIZABLE.
-- Проверьте рейтинг “Pizza Hut” в режиме транзакции для обеих сессий, а затем сделайте UPDATE рейтинга
-- до значения 3.0 в сессии 2.

-- проверяем уровень изоляции в обеих сессиях
SHOW TRANSACTION ISOLATION LEVEL;

-- меняем уровень изоляции в обеих сессиях
SET SESSION CHARACTERISTICS AS TRANSACTION ISOLATION LEVEL SERIALIZABLE;

-- проверяем что мы получили изоляцию уровня SERIALIZABLE в обеих сессиях
SHOW TRANSACTION ISOLATION LEVEL;

-- открываем тразнзакцию в сессии 1
BEGIN;

-- открываем тразнзакцию в сессии 2
BEGIN;

-- проверяем рейтинг в сессии 1
SELECT *
FROM pizzeria
WHERE name = 'Pizza Hut';

-- обновляем рейтинг в сессии 2 до значения 3.0
UPDATE pizzeria
SET rating = 3.0
WHERE pizzeria.name = 'Pizza Hut';

-- завершаем транзакцию в сессии 2
COMMIT;

-- проверяем рейтинг в сессии 1, видим, что изменения из сессии 2 нам ещ не доступны
SELECT *
FROM pizzeria
WHERE name = 'Pizza Hut';

-- завершаем транзакцию в сессии 1
COMMIT;

-- запускаем скрипт для обеих сессий, убеждаемся что вывод одинаковый
-- и будет соотвествовать апдейту из сессии 2.
SELECT *
FROM pizzeria
WHERE name = 'Pizza Hut';



-- ЗАДАНИЕ 5
-- Используйте командную строку. Необходимо открыть 2 параллельные сессии в командной строке.
-- Проверим один из известных шаблонов базы данных “Phantom Reads”, но с уровнем изоляции READ COMMITTED.
-- Суммируйте все оценки для всех пиццерий в режиме транзакции для обеих сессий и после этого произведите
-- сделайте UPDATE рейтинга до значения 1 для ресторана "Pizza Hut" в сессии 2.

-- проверяем уровень изоляции в обеих сессиях
SHOW TRANSACTION ISOLATION LEVEL;

-- меняем уровень изоляции в обеих сессиях
SET SESSION CHARACTERISTICS AS TRANSACTION ISOLATION LEVEL READ COMMITTED;

-- проверяем что мы получили изоляцию уровня READ COMMITTED в обеих сессиях
SHOW TRANSACTION ISOLATION LEVEL;

-- открываем тразнзакцию в сессии 1
BEGIN;

-- открываем тразнзакцию в сессии 2
BEGIN;

-- проверяем сумму по полю рейтинг в сессии 1
SELECT SUM(rating)
FROM pizzeria;

-- обновляем рейтинг в сессии 2 до значения 1
UPDATE pizzeria
SET rating = 1
WHERE pizzeria.name = 'Pizza Hut';

-- завершаем транзакцию в сессии 2
COMMIT;

-- проверяем сумму по полю рейтинг в сессии 1, видим, что изменения из сессии 2 нам доступны
SELECT SUM(rating)
FROM pizzeria;

-- завершаем транзакцию в сессии 1
COMMIT;

-- запускаем скрипт для обеих сессий, убеждаемся что вывод одинаковый
-- и будет соотвествовать апдейту из сессии 2.
SELECT *
FROM pizzeria
WHERE name = 'Pizza Hut';




-- ЗАДАНИЕ 6
-- Используйте командную строку. Необходимо открыть 2 параллельные сессии в командной строке.
-- Проверим один из известных шаблонов базы данных “Phantom Reads”, но с уровнем изоляции REPEATABLE READ.
-- Суммируйте все оценки для всех пиццерий в режиме транзакции для обеих сессий, а затем сделайте UPDATE рейтинга
-- до 5 баллов для ресторана "Pizza Hut" в сессии 2.

-- проверяем уровень изоляции в обеих сессиях
SHOW TRANSACTION ISOLATION LEVEL;

-- меняем уровень изоляции в обеих сессиях
SET SESSION CHARACTERISTICS AS TRANSACTION ISOLATION LEVEL REPEATABLE READ;

-- проверяем что мы получили изоляцию уровня REPEATABLE READ в обеих сессиях
SHOW TRANSACTION ISOLATION LEVEL;

-- открываем тразнзакцию в сессии 1
BEGIN;

-- открываем тразнзакцию в сессии 2
BEGIN;

-- проверяем сумму по полю рейтинг в сессии 1
SELECT SUM(rating)
FROM pizzeria;

-- обновляем рейтинг в сессии 2 до значения 5
UPDATE pizzeria
SET rating = 5
WHERE pizzeria.name = 'Pizza Hut';

-- завершаем транзакцию в сессии 2
COMMIT;

-- проверяем сумму по полю рейтинг в сессии 1, видим, что изменения из сессии 2 нам не доступны
SELECT SUM(rating)
FROM pizzeria;

-- завершаем транзакцию в сессии 1
COMMIT;

-- запускаем скрипт для обеих сессий, убеждаемся что вывод одинаковый
-- и будет соотвествовать апдейту из сессии 2.
SELECT SUM(rating)
FROM pizzeria;



-- ЗАДАНИЕ 7
-- Используйте командную строку. Необходимо открыть 2 параллельные сессии в командной строке.
-- Давайте воспроизведем тупиковую ситуацию в нашей базе данных.
-- Напишите любую инструкцию SQL с любым уровнем изоляции (вы можете использовать настройки по умолчанию)
-- в таблице "пиццерия", чтобы воспроизвести эту ситуацию взаимоблокировки.

-- проверяем уровень изоляции в обеих сессиях
SHOW TRANSACTION ISOLATION LEVEL;

-- открываем тразнзакцию в сессии 1
BEGIN;

-- открываем тразнзакцию в сессии 2
BEGIN;

-- делаем апдейт рэйтинга в сессии 1
update pizzeria set rating = 2 where pizzeria.id = 1;

-- -- делаем апдейт рэйтинга в сессии 2
update pizzeria set rating = 0.5 where pizzeria.id = 2;

-- делаем апдейт рэйтинга в сессии 1 с изменением как в сессии 2. Сессия 1 бокируется.
update pizzeria set rating = 5 where pizzeria.id = 2;

-- делаем апдейт рэйтинга в сессии 2 с изменением как в сессии 1 и получаем ошибку
-- (попали в тупик так как друг друга заблокировали).
-- ошибки видно на скрине
update pizzeria set rating = 4.9 where pizzeria.id = 1;

-- завершаем транзакцию в сессии 1
COMMIT;

-- завершаем транзакцию в сессии 2
COMMIT;

-- по итогу сессия 1 отработала полностью
